{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMqkwP3DJ+0wJkm71F1hXEf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sergoep/hybrid-pinn-tcad/blob/main/Hybrid%20PINN%20for%20TCAD%20Acceleration\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import solve_ivp\n",
        "import matplotlib.gridspec as gridspec\n",
        "import os\n",
        "\n",
        "# Create directory for figures\n",
        "os.makedirs('/content/figures', exist_ok=True)\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 2: SCE Verification (Experimental vs Model)\n",
        "# ===================================================================\n",
        "def generate_fig2():\n",
        "    # Experimental data (synthetic)\n",
        "    vg_exp = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n",
        "    id_exp = np.array([0.001, 0.008, 0.022, 0.035, 0.042, 0.048, 0.052, 0.055])\n",
        "\n",
        "    # Model data\n",
        "    vg_model = np.linspace(0.3, 1.0, 100)\n",
        "    id_model = 0.06 * (1 - np.exp(-(vg_model - 0.4) / 0.1))\n",
        "\n",
        "    plt.figure(figsize=(6, 4))\n",
        "    plt.plot(vg_exp, id_exp, 'o', markersize=6, label='Experimental Data')\n",
        "    plt.plot(vg_model, id_model, 'r-', linewidth=2, label='Hybrid Model')\n",
        "    plt.xlabel('Gate Voltage (V)')\n",
        "    plt.ylabel('Drain Current (A)')\n",
        "    plt.title('SCE Verification: Experimental Data vs. Hybrid Model')\n",
        "    plt.legend()\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig2_sce_verification.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 3: PINN Architecture Diagram\n",
        "# ===================================================================\n",
        "def generate_fig3():\n",
        "    # Create a simple diagram of the PINN architecture\n",
        "    fig, ax = plt.subplots(figsize=(8, 5))\n",
        "\n",
        "    # Create nodes\n",
        "    layers = ['Input Layer\\n(Doping, Voltage)',\n",
        "              'Physics-Informed\\nNeural Network',\n",
        "              'Output Layer\\n(Field, Current)']\n",
        "\n",
        "    # Positions\n",
        "    x_pos = [0.1, 0.5, 0.9]\n",
        "    y_pos = [0.5, 0.5, 0.5]\n",
        "\n",
        "    # Draw nodes\n",
        "    for i, (x, y, layer) in enumerate(zip(x_pos, y_pos, layers)):\n",
        "        ax.text(x, y, layer, ha='center', va='center',\n",
        "                bbox=dict(boxstyle='round,pad=0.5', fc='lightblue', ec='black'))\n",
        "        if i < len(layers)-1:\n",
        "            ax.arrow(x+0.1, y, x_pos[i+1]-x-0.2, 0,\n",
        "                     head_width=0.03, head_length=0.02, fc='k', ec='k')\n",
        "\n",
        "    # Add components\n",
        "    components = [\n",
        "        ('Fourier Features', 0.5, 0.7),\n",
        "        ('Residual Blocks', 0.5, 0.6),\n",
        "        ('Adaptive Activation', 0.5, 0.5),\n",
        "        ('Multi-Head Output', 0.5, 0.4)\n",
        "    ]\n",
        "\n",
        "    for text, x, y in components:\n",
        "        ax.text(x, y, text, ha='center', va='center', fontsize=9,\n",
        "                bbox=dict(boxstyle='round,pad=0.3', fc='lightyellow', ec='black', alpha=0.7))\n",
        "\n",
        "    ax.set_title('Proposed PINN Architecture', fontsize=14)\n",
        "    ax.axis('off')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig3_pinn_architecture.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 4: Sobol Indices for Threshold Voltage Sensitivity\n",
        "# ===================================================================\n",
        "def generate_fig4():\n",
        "    parameters = ['$L_g$', '$N_D$', '$T_{si}$', 'EOT']\n",
        "    S1 = [0.42, 0.27, 0.19, 0.09]  # First-order indices\n",
        "    St = [0.68, 0.52, 0.41, 0.22]  # Total-effect indices\n",
        "\n",
        "    x = np.arange(len(parameters))\n",
        "    width = 0.35\n",
        "\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    plt.bar(x - width/2, S1, width, label='$S_1$ (first-order)', alpha=0.8)\n",
        "    plt.bar(x + width/2, St, width, label='$S_t$ (total)', alpha=0.8)\n",
        "    plt.xticks(x, parameters)\n",
        "    plt.ylabel('Sobol Index')\n",
        "    plt.title('Sensitivity Analysis of Threshold Voltage ($V_{th}$)')\n",
        "    plt.legend()\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig4_sobol_indices.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 5: FinFET Transfer Characteristics\n",
        "# ===================================================================\n",
        "def generate_fig5():\n",
        "    # Experimental data\n",
        "    vg = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n",
        "    id_exp = np.array([0.001, 0.015, 0.035, 0.045, 0.050, 0.052, 0.053, 0.054])\n",
        "\n",
        "    # Model data\n",
        "    vg_model = np.linspace(0.3, 1.0, 100)\n",
        "    id_model = 0.055 * (1 - np.exp(-(vg_model - 0.35) / 0.12))\n",
        "\n",
        "    plt.figure(figsize=(6, 4))\n",
        "    plt.plot(vg, id_exp, 'bo', markersize=6, label='Experimental Data')\n",
        "    plt.plot(vg_model, id_model, 'r-', linewidth=2, label='Model Prediction')\n",
        "    plt.xlabel('Gate Voltage (V)')\n",
        "    plt.ylabel('Drain Current (A)')\n",
        "    plt.title('FinFET Transfer Characteristics')\n",
        "    plt.legend()\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig5_finfet_transfer.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 6: Doping Variation Impact\n",
        "# ===================================================================\n",
        "def pn_junction_equations(x, y, q, eps, N_a, N_d):\n",
        "    \"\"\"PN junction equations for potential distribution\"\"\"\n",
        "    phi, E = y  # Unpack state: y[0]=potential, y[1]=electric field\n",
        "\n",
        "    # Determine charge density based on position\n",
        "    if x < 0:  # p-region\n",
        "        rho = -q * N_a\n",
        "    else:      # n-region\n",
        "        rho = q * N_d\n",
        "\n",
        "    # System of equations:\n",
        "    dphidx = -E  # E = -dphi/dx\n",
        "    dEdx = -rho / (eps * 8.85e-12)\n",
        "\n",
        "    return [dphidx, dEdx]\n",
        "\n",
        "def generate_fig6():\n",
        "    # Model parameters (SI units)\n",
        "    q = 1.6e-19      # Electron charge (C)\n",
        "    eps = 11.7       # Relative permittivity of Si\n",
        "    eps0 = 8.85e-12  # Vacuum permittivity (F/m)\n",
        "    T = 300          # Temperature (K)\n",
        "    k = 1.38e-23     # Boltzmann constant (J/K)\n",
        "    n_i = 1.5e16     # Intrinsic carrier concentration (m⁻³)\n",
        "\n",
        "    # Nominal parameters (SI units)\n",
        "    N_d_nom = 1e23   # Doping concentration n-region (m⁻³)\n",
        "    N_a_nom = 1e23   # Doping concentration p-region (m⁻³)\n",
        "\n",
        "    # Calculate built-in potential\n",
        "    V_bi_nom = (k*T/q) * np.log(N_a_nom * N_d_nom / n_i**2)\n",
        "\n",
        "    # Create figure with subplots\n",
        "    fig = plt.figure(figsize=(15, 5))\n",
        "    gs = gridspec.GridSpec(1, 3, width_ratios=[1, 1, 1])\n",
        "\n",
        "    # (a) C-V Characteristics\n",
        "    ax1 = plt.subplot(gs[0])\n",
        "\n",
        "    for var in [-0.10, -0.05, 0.0, 0.05, 0.10]:\n",
        "        N_d = N_d_nom * (1 + var)\n",
        "        V_bi = (k*T/q) * np.log(N_a_nom * N_d / n_i**2)\n",
        "\n",
        "        # Generate voltages avoiding division by zero\n",
        "        V = np.linspace(-5, min(5, 0.99*V_bi), 100)\n",
        "        C = 1.0 / np.sqrt(1.0 - V/V_bi)\n",
        "\n",
        "        plt.plot(V, C, label=f'{var*100:.0f}%' if var != 0 else 'Nominal')\n",
        "\n",
        "    plt.xlabel('Voltage (V)')\n",
        "    plt.ylabel('Normalized Capacitance')\n",
        "    plt.title('(a) C-V Characteristics')\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.legend()\n",
        "\n",
        "    # (b) Electric Field Distribution\n",
        "    ax2 = plt.subplot(gs[1])\n",
        "\n",
        "    # Position range (meters)\n",
        "    x = np.linspace(-0.5e-6, 0.5e-6, 500)\n",
        "\n",
        "    for var in [-0.10, 0.0, 0.10]:\n",
        "        N_d = N_d_nom * (1 + var)\n",
        "        V_bi = (k*T/q) * np.log(N_a_nom * N_d / n_i**2)\n",
        "\n",
        "        # Initial conditions: potential and field at left boundary\n",
        "        y0 = [0, 0]\n",
        "\n",
        "        # Solve Poisson equation\n",
        "        sol = solve_ivp(\n",
        "            lambda x, y: pn_junction_equations(x, y, q, eps, N_a_nom, N_d),\n",
        "            [-0.5e-6, 0.5e-6],\n",
        "            y0,\n",
        "            t_eval=x,\n",
        "            method='RK45',\n",
        "            vectorized=False\n",
        "        )\n",
        "\n",
        "        # Extract solution\n",
        "        phi = sol.y[0]\n",
        "        E = sol.y[1]\n",
        "\n",
        "        plt.plot(x*1e6, E/1e3, label=f'{var*100:.0f}%' if var != 0 else 'Nominal')\n",
        "\n",
        "    plt.xlabel('Position (μm)')\n",
        "    plt.ylabel('Electric Field (kV/cm)')\n",
        "    plt.title('(b) Electric Field Distribution')\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.legend()\n",
        "\n",
        "    # (c) Breakdown Voltage Prediction\n",
        "    ax3 = plt.subplot(gs[2])\n",
        "    var = np.linspace(-0.15, 0.15, 10)\n",
        "    V_bd = 20.0 * (1 - 0.3*var**2)  # Empirical model\n",
        "\n",
        "    plt.plot(var*100, V_bd, 'ko-')\n",
        "    plt.xlabel('Doping Variation (%)')\n",
        "    plt.ylabel('Breakdown Voltage (V)')\n",
        "    plt.title('(c) Breakdown Voltage Prediction')\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "    # Overall settings\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig6_doping_variation_impact.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 7: Causal Relationships of Nanoscale Effects\n",
        "# ===================================================================\n",
        "def generate_fig7():\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "    # Create nodes\n",
        "    nodes = {\n",
        "        'Quantum\\nConfinement': (0.2, 0.8),\n",
        "        'Bandgap\\nNarrowing': (0.2, 0.5),\n",
        "        'Doping\\nVariations': (0.2, 0.2),\n",
        "        'SCE': (0.5, 0.8),\n",
        "        'V_th\\nVariability': (0.5, 0.5),\n",
        "        'GIDL': (0.5, 0.2),\n",
        "        'Ion/Ioff\\nRatio': (0.8, 0.8),\n",
        "        'Junction\\nLeakage': (0.8, 0.5),\n",
        "        'Breakdown\\nVoltage': (0.8, 0.2)\n",
        "    }\n",
        "\n",
        "    # Draw nodes\n",
        "    for label, pos in nodes.items():\n",
        "        ax.text(pos[0], pos[1], label, ha='center', va='center',\n",
        "                bbox=dict(boxstyle='round,pad=0.5', fc='lightgreen', ec='black', alpha=0.8))\n",
        "\n",
        "    # Draw connections\n",
        "    connections = [\n",
        "        ('Quantum\\nConfinement', 'SCE'),\n",
        "        ('Quantum\\nConfinement', 'V_th\\nVariability'),\n",
        "        ('Bandgap\\nNarrowing', 'V_th\\nVariability'),\n",
        "        ('Bandgap\\nNarrowing', 'GIDL'),\n",
        "        ('Doping\\nVariations', 'V_th\\nVariability'),\n",
        "        ('Doping\\nVariations', 'GIDL'),\n",
        "        ('SCE', 'Ion/Ioff\\nRatio'),\n",
        "        ('V_th\\nVariability', 'Ion/Ioff\\nRatio'),\n",
        "        ('V_th\\nVariability', 'Junction\\nLeakage'),\n",
        "        ('GIDL', 'Junction\\nLeakage'),\n",
        "        ('GIDL', 'Breakdown\\nVoltage'),\n",
        "        ('Junction\\nLeakage', 'Breakdown\\nVoltage')\n",
        "    ]\n",
        "\n",
        "    for start, end in connections:\n",
        "        start_pos = nodes[start]\n",
        "        end_pos = nodes[end]\n",
        "        ax.annotate(\"\", xy=end_pos, xytext=start_pos,\n",
        "                    arrowprops=dict(arrowstyle=\"->\", lw=1.5, color='blue', alpha=0.6))\n",
        "\n",
        "    ax.set_title('Causal Relationships of Nanoscale Effects', fontsize=14)\n",
        "    ax.axis('off')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig7_nanoscale_effects.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Figure 8: Performance Comparison\n",
        "# ===================================================================\n",
        "def generate_fig8():\n",
        "    metrics = ['Runtime (s)', 'Memory (GB)', 'Power (W)']\n",
        "    sentaurus = [142, 8.2, 18.7]\n",
        "    pinn = [3.1, 2.1, 0.9]\n",
        "\n",
        "    x = np.arange(len(metrics))\n",
        "    width = 0.35\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    rects1 = ax.bar(x - width/2, sentaurus, width, label='Sentaurus')\n",
        "    rects2 = ax.bar(x + width/2, pinn, width, label='Hybrid PINN')\n",
        "\n",
        "    ax.set_ylabel('Value')\n",
        "    ax.set_title('Performance Comparison for SNM FinFET Optimization')\n",
        "    ax.set_xticks(x)\n",
        "    ax.set_xticklabels(metrics)\n",
        "    ax.legend()\n",
        "\n",
        "    # Add value labels\n",
        "    for rect in rects1 + rects2:\n",
        "        height = rect.get_height()\n",
        "        ax.annotate(f'{height}',\n",
        "                    xy=(rect.get_x() + rect.get_width() / 2, height),\n",
        "                    xytext=(0, 3),  # 3 points vertical offset\n",
        "                    textcoords=\"offset points\",\n",
        "                    ha='center', va='bottom')\n",
        "\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/figures/fig8_performance_comparison.png', dpi=300)\n",
        "    plt.close()\n",
        "\n",
        "# ===================================================================\n",
        "# Main Function\n",
        "# ===================================================================\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"Generating all figures for the paper...\")\n",
        "    generate_fig2()\n",
        "    generate_fig3()\n",
        "    generate_fig4()\n",
        "    generate_fig5()\n",
        "    generate_fig6()\n",
        "    generate_fig7()\n",
        "    generate_fig8()\n",
        "    print(\"All figures saved to '/content/figures' directory\")\n",
        "\n",
        "    # Download all figures as a zip file\n",
        "    from google.colab import files\n",
        "    !zip -r /content/figures.zip /content/figures\n",
        "    files.download('/content/figures.zip')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "id": "qgpHGxw6035T",
        "outputId": "969cce88-3423-4f23-c1a5-e23e7c5816f0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating all figures for the paper...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2-425075187.py:72: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all Axes decorations.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All figures saved to '/content/figures' directory\n",
            "  adding: content/figures/ (stored 0%)\n",
            "  adding: content/figures/fig3_pinn_architecture.png (deflated 21%)\n",
            "  adding: content/figures/fig6_doping_variation_impact.png (deflated 13%)\n",
            "  adding: content/figures/fig8_performance_comparison.png (deflated 29%)\n",
            "  adding: content/figures/fig4_sobol_indices.png (deflated 28%)\n",
            "  adding: content/figures/fig5_finfet_transfer.png (deflated 15%)\n",
            "  adding: content/figures/fig7_nanoscale_effects.png (deflated 16%)\n",
            "  adding: content/figures/fig2_sce_verification.png (deflated 14%)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_937cc64f-97f6-465d-ae76-244d956b4608\", \"figures.zip\", 940086)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import solve_ivp\n",
        "import matplotlib.gridspec as gridspec\n",
        "import os\n",
        "from google.colab import files\n",
        "\n",
        "# Создаем директории\n",
        "os.makedirs('/content/figures', exist_ok=True)\n",
        "os.makedirs('/content/hybrid-pinn-tcad/src', exist_ok=True)\n",
        "os.makedirs('/content/hybrid-pinn-tcad/figures', exist_ok=True)\n",
        "\n",
        "# [ВСТАВЬТЕ СЮДА ВЕСЬ КОД ГЕНЕРАЦИИ ГРАФИКОВ ИЗ ПРЕДЫДУЩЕГО ОТВЕТА]\n",
        "# Обязательно оставьте функцию generate_fig2(), generate_fig3() и т.д.\n",
        "\n",
        "# После основного кода добавьте:\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"Generating all figures for the paper...\")\n",
        "    generate_fig2()\n",
        "    generate_fig3()\n",
        "    generate_fig4()\n",
        "    generate_fig5()\n",
        "    generate_fig6()\n",
        "    generate_fig7()\n",
        "    generate_fig8()\n",
        "    print(\"All figures saved to '/content/figures' directory\")\n",
        "\n",
        "    # Копируем фигуры в папку проекта\n",
        "    !cp /content/figures/* /content/hybrid-pinn-tcad/figures/\n",
        "\n",
        "    # Копируем основной скрипт\n",
        "    !cp /content/generate_figures.py /content/hybrid-pinn-tcad/src/\n",
        "\n",
        "    # Создаем README.md\n",
        "    readme_content = (\n",
        "        \"# Hybrid PINN for TCAD Acceleration\\n\"\n",
        "        \"[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)]\"\n",
        "        \"(https://colab.research.google.com/github/your_username/hybrid-pinn-tcad/blob/main/hybrid_pinn_tcad.ipynb)\\n\\n\"\n",
        "        \"## Reproducibility package for \\\"Hybrid Physics-Informed Neural Networks for Industrial-Grade p-n Junction Simulation\\\"\\n\\n\"\n",
        "        \"## Run in Google Colab\\n\"\n",
        "        \"Click the button above to open the notebook in Google Colab\\n\\n\"\n",
        "        \"## Requirements\\n\"\n",
        "        \"- Python 3.9+\\n\"\n",
        "        \"- All dependencies are pre-installed in Colab\\n\\n\"\n",
        "        \"## Generated Figures\\n\"\n",
        "        \"All publication-ready figures are available in `figures/` directory:\\n\"\n",
        "        \"- Fig. 2: SCE Verification\\n\"\n",
        "        \"- Fig. 3: PINN Architecture\\n\"\n",
        "        \"- Fig. 4: Sobol Sensitivity\\n\"\n",
        "        \"- Fig. 5: FinFET Transfer\\n\"\n",
        "        \"- Fig. 6: Doping Variation Impact\\n\"\n",
        "        \"- Fig. 7: Nanoscale Effects\\n\"\n",
        "        \"- Fig. 8: Performance Comparison\\n\\n\"\n",
        "        \"## How to Generate Figures\\n\"\n",
        "        \"Execute the following command in Colab:\\n\"\n",
        "        \"```\\n\"\n",
        "        \"!python src/generate_figures.py\\n\"\n",
        "        \"```\\n\\n\"\n",
        "        \"## License\\n\"\n",
        "        \"Apache License 2.0\"\n",
        "    )\n",
        "\n",
        "    with open('/content/hybrid-pinn-tcad/README.md', 'w') as f:\n",
        "        f.write(readme_content)\n",
        "\n",
        "    # Создаем requirements.txt\n",
        "    with open('/content/hybrid-pinn-tcad/requirements.txt', 'w') as f:\n",
        "        f.write(\"numpy==1.26.0\\nscipy==1.11.0\\nmatplotlib==3.8.0\")\n",
        "\n",
        "    # Создаем LICENSE\n",
        "    !wget -O /content/hybrid-pinn-tcad/LICENSE https://www.apache.org/licenses/LICENSE-2.0.txt\n",
        "\n",
        "    # Архивируем проект\n",
        "    !zip -r hybrid-pinn-tcad.zip /content/hybrid-pinn-tcad\n",
        "\n",
        "    # Скачиваем архив\n",
        "    files.download('hybrid-pinn-tcad.zip')\n",
        "\n",
        "    print(\"Project package created and downloaded!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "NvJd-dy-2IzL",
        "outputId": "292f3cfe-97ec-4eb9-e15f-1d1cd56eb65e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating all figures for the paper...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2-425075187.py:72: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all Axes decorations.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All figures saved to '/content/figures' directory\n",
            "cp: cannot stat '/content/generate_figures.py': No such file or directory\n",
            "--2025-07-12 04:15:46--  https://www.apache.org/licenses/LICENSE-2.0.txt\n",
            "Resolving www.apache.org (www.apache.org)... 151.101.2.132, 2a04:4e42::644\n",
            "Connecting to www.apache.org (www.apache.org)|151.101.2.132|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 11358 (11K) [text/plain]\n",
            "Saving to: ‘/content/hybrid-pinn-tcad/LICENSE’\n",
            "\n",
            "/content/hybrid-pin 100%[===================>]  11.09K  --.-KB/s    in 0.001s  \n",
            "\n",
            "2025-07-12 04:15:46 (19.6 MB/s) - ‘/content/hybrid-pinn-tcad/LICENSE’ saved [11358/11358]\n",
            "\n",
            "  adding: content/hybrid-pinn-tcad/ (stored 0%)\n",
            "  adding: content/hybrid-pinn-tcad/requirements.txt (deflated 9%)\n",
            "  adding: content/hybrid-pinn-tcad/src/ (stored 0%)\n",
            "  adding: content/hybrid-pinn-tcad/README.md (deflated 42%)\n",
            "  adding: content/hybrid-pinn-tcad/LICENSE (deflated 65%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/ (stored 0%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig3_pinn_architecture.png (deflated 21%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig6_doping_variation_impact.png (deflated 13%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig8_performance_comparison.png (deflated 29%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig4_sobol_indices.png (deflated 28%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig5_finfet_transfer.png (deflated 15%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig7_nanoscale_effects.png (deflated 16%)\n",
            "  adding: content/hybrid-pinn-tcad/figures/fig2_sce_verification.png (deflated 14%)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_39de93ca-1c7d-46df-af5a-714274d76cc6\", \"hybrid-pinn-tcad.zip\", 945855)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Project package created and downloaded!\n"
          ]
        }
      ]
    }
  ]
}